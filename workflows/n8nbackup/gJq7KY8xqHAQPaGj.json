{
  "active": true,
  "connections": {
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Send Analysis",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "JSON formatting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON formatting": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          },
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Base64": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Get Base64",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-06T06:01:27.329Z",
  "id": "gJq7KY8xqHAQPaGj",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "備份Credentials",
  "nodes": [
    {
      "parameters": {},
      "id": "0c3f48b4-dc02-4b7d-a1df-6f2c069ad2d8",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -120,
        750
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "edcd11d5-b4ce-4542-ae88-35a6adf30812",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        2300,
        1410
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {},
      "id": "c6ca42d0-06ca-4a74-94a2-8c78aed1547a",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        1200,
        1410
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = $input.all()[0].json;\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"
      },
      "id": "4cb8fd85-6aa5-49c9-91ab-eae235f4aeff",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        1420,
        1410
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "3896f975-d1dc-4fc0-acb2-7ca112c11424",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        1640,
        1389
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "ca8f2b3c-c270-453a-a673-713bde309acb",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        2080,
        1210
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "6277b41f-f380-47d6-9fef-dcf822187088",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1860,
        1410
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "3ac0a87d-46a0-48a8-9735-2fef876377b5",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1860,
        1610
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "4bcc64b1-1b75-43b5-a717-007fdf8ae3f0",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        2080,
        1610
      ],
      "typeVersion": 1,
      "webhookId": "7dd9891b-fa74-4ded-a2ca-846f6c49ab00",
      "credentials": {
        "githubApi": {
          "id": "WjiS6Oe97EVeWLGg",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "39f17951-9b09-4bbe-81be-8176eebf81d1",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        2080,
        1410
      ],
      "typeVersion": 1,
      "webhookId": "6f20de19-9385-4f02-b5e5-5d009a3f5b7f",
      "credentials": {
        "githubApi": {
          "id": "WjiS6Oe97EVeWLGg",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "a04dca22-42ef-46c2-80b4-4b0db6e0f2a4",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        540,
        875
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "id": "a859d2cf-607c-448a-8b52-69eb494c172e",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -120,
        950
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.name }}"
        },
        "filePath": "={{ $json.repo.path }}{{ $('Execute Workflow Trigger').item.json.id }}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "4e3ba367-f813-4801-a684-75d432708040",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        320,
        1335
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "webhookId": "ce44636e-b565-45bb-a05f-8dbe72b87483",
      "credentials": {
        "githubApi": {
          "id": "WjiS6Oe97EVeWLGg",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
              "name": "repo.owner",
              "type": "string",
              "value": "myrest"
            },
            {
              "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
              "name": "repo.name",
              "type": "string",
              "value": "n8n-backup"
            },
            {
              "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
              "name": "repo.path",
              "type": "string",
              "value": "credentials/"
            }
          ]
        },
        "options": {}
      },
      "id": "901f85d3-27ae-4662-b886-f83d7034d8ae",
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "position": [
        100,
        1335
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "command": "npx n8n export:credentials --all --decrypted"
      },
      "id": "d9f652e5-5653-4f82-b5e5-0c9fdc325dec",
      "name": "Execute Command",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        100,
        875
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Function to beautify JSON\nfunction beautifyJson(jsonString) {\n  try {\n    // Parse the JSON string\n    const jsonObject = JSON.parse(jsonString);\n\n    // Format the JSON with indentation\n    return jsonObject; // Return the parsed object directly\n  } catch (error) {\n    // Return the error message if JSON is invalid\n    return `Invalid JSON: ${error.message}`;\n  }\n}\n\n// Retrieve the JSON object from the input data\nconst input = $input.all()[0].json;\n\n// Extract the JSON string from the stdout field\nconst jsonString = input.stdout.match(/\\[{.*}\\]/s);\n\n// Check if a valid JSON string is found\nif (!jsonString) {\n  return {\n    json: {\n      error: \"No valid JSON string found in stdout.\"\n    }\n  };\n}\n\n// Beautify the JSON\nconst beautifiedJson = beautifyJson(jsonString[0]);\n\n// Output the beautified JSON, ensuring each entry is in an object with a 'json' key\nconst output = beautifiedJson.map(entry => ({ json: entry }));\n\n// Return the output\nreturn output;\n"
      },
      "id": "55e16385-6b73-40b0-8adc-768d3164bde8",
      "name": "JSON formatting",
      "type": "n8n-nodes-base.code",
      "position": [
        320,
        875
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "id": "e5653364-e930-40b5-b87a-fa23b4b8cb1f",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -120,
        1410
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "592aa800-c073-40f2-af32-0eb8b7a61f6e",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        980,
        950
      ],
      "typeVersion": 1,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "chatId": "=5513588652",
        "text": "備份完成",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "e8db6d31-c293-4700-b111-1fbd50d0df3a",
      "name": "Send Analysis",
      "type": "n8n-nodes-base.telegram",
      "position": [
        760,
        675
      ],
      "webhookId": "8f97947a-ddce-4176-b5ac-53d5531ce9ba",
      "typeVersion": 1.2,
      "executeOnce": true,
      "credentials": {
        "telegramApi": {
          "id": "0vSzsoInEfTGHS1W",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const decodedBuffer = Buffer.from($input.first().json.data, 'base64');\njsonString = decodedBuffer.toString('utf8');\njsonObject = JSON.parse(jsonString);\nreturn jsonObject"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        980,
        1260
      ],
      "id": "4befca7b-66e7-4376-a2d7-3f5b41b2f269",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b35a1b71-c685-4f86-9a2f-a52ad93650a8",
              "name": "data",
              "value": "={{ $json.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        760,
        1260
      ],
      "id": "7b0fe409-9051-424c-a708-94b7d41fec64",
      "name": "Get Base64"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3fd47820-bbd7-432d-b714-c8ca00018002",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        540,
        1335
      ],
      "id": "6e227291-ca46-421f-a046-0ead4ccf5b76",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "const rtn = $input.first().json\nconst originalString = JSON.stringify($input.first().json.data);\nconst encodedString = Buffer.from(originalString, 'utf8').toString('base64');\n\nrtn.data = encodedString\n\nreturn rtn\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        760,
        875
      ],
      "id": "ead9a99b-b9c9-4075-a7fe-593d8c0e210f",
      "name": "Code1"
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "createdAt": "2025-05-13T07:54:17.938Z",
          "updatedAt": "2025-06-06T06:42:30.051Z",
          "id": "i6gapvDqvKpQSI0r",
          "name": "SMTP account",
          "data": "eyJ1c2VyIjoibXlyZXN0QGdtYWlsLmNvbV9YWFhYIiwicGFzc3dvcmQiOiJ0cXhjIHBidWEgaWlsYiBxbnRiIiwiaG9zdCI6InNtdHAuZ21haWwuY29tIn0=",
          "type": "smtp",
          "isManaged": false
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2025-06-06T03:03:36.526Z",
      "updatedAt": "2025-06-06T03:03:36.526Z",
      "id": "cEbqjcBcfcKDhR6r",
      "name": "n8nbackup"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-06-06T08:11:19.000Z",
  "versionId": "4bf3ed6a-babc-4a69-a79a-4ce13fb18975"
}